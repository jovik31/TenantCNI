// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// TenantSpecApplyConfiguration represents an declarative configuration of the TenantSpec type for use
// with apply.
type TenantSpecApplyConfiguration struct {
	Name  *string                  `json:"name,omitempty"`
	Nodes []NodeApplyConfiguration `json:"nodes,omitempty"`
}

// TenantSpecApplyConfiguration constructs an declarative configuration of the TenantSpec type for use with
// apply.
func TenantSpec() *TenantSpecApplyConfiguration {
	return &TenantSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithName(value string) *TenantSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithNodes adds the given value to the Nodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Nodes field.
func (b *TenantSpecApplyConfiguration) WithNodes(values ...*NodeApplyConfiguration) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNodes")
		}
		b.Nodes = append(b.Nodes, *values[i])
	}
	return b
}
